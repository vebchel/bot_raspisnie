# bot.py
# bot.py
import asyncio
import logging
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import config
import db
import scheduler
import schedule_fetcher

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN, parse_mode=ParseMode.HTML)
#bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class RegStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    name = State()
    surname = State()
    group = State()
    schedule_time = State()


# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def create_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [
            KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù"),
            KeyboardButton(text="–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ"),
        ],
        [
            KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üóìÔ∏è"),
        ],
        [
            KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è ‚è∞"),
        ],
        [
            KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üóëÔ∏è")
        ]
    ])
    return keyboard


# --- –•–ï–ù–î–õ–ï–†–´ ---

@dp.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user = db.get_user(message.chat.id)
    keyboard = create_keyboard()  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {user[2]}! üëã\n"
            f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {user[4]} üòé\n"
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤: {user[5]} ‚è∞\n\n"
            "–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? ü§î",  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç
            reply_markup=keyboard  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        await state.clear()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(
            f"–ô–æ—É, {message.from_user.full_name}! üëã –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ –∫–æ–ª–ª–µ–¥–∂–µ! üöÄ\n"
            "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ü§î\n"
            "(–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è)",
            reply_markup=keyboard  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        await state.set_state(RegStates.name)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")


@dp.message(RegStates.name)
async def reg_name(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –∏–º—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é."""
    if not message.text or len(message.text) < 2:
        await message.answer("–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è ü§î. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑?", reply_markup=create_keyboard())
        return

    await state.update_data(name=message.text.strip())
    await message.answer(f"–û–∫–µ–π, {message.text.strip()}! –ü—Ä–∏–Ω—è—Ç–æ ‚úÖ\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é.", reply_markup=create_keyboard())
    await state.set_state(RegStates.surname)


@dp.message(RegStates.surname)
async def reg_surname(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç —Ñ–∞–º–∏–ª–∏—é –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É."""
    if not message.text or len(message.text) < 2:
        await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ü§î. –ï—â–µ —Ä–∞–∑–æ–∫?", reply_markup=create_keyboard())
        return

    await state.update_data(surname=message.text.strip())
    await message.answer("–°—É–ø–µ—Ä! üí™ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–í–¢-1, –ü–î-2 –∏ —Ç.–¥.).", reply_markup=create_keyboard())
    await state.set_state(RegStates.group)


@dp.message(RegStates.group)
async def reg_group(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –≥—Ä—É–ø–ø—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    if not message.text or len(message.text) < 2:
        await message.answer("–ù—É–∂–Ω–∞ –≥—Ä—É–ø–ø–∞, —á—É–≤–∞–∫! –ë–µ–∑ –Ω–µ–µ –Ω–∏–∫–∞–∫ üòÖ. –í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑?", reply_markup=create_keyboard())
        return

    await state.update_data(group=message.text.strip().upper())  # –ì—Ä—É–ø–ø—É –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    await message.answer(
        "–ö—Ä–∞—Å–∞–≤—á–∏–∫! üòé –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n"
        "–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
        "‚è∞ –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30, 12:00).", reply_markup=create_keyboard()
    )
    await state.set_state(RegStates.schedule_time)


@dp.message(RegStates.schedule_time)
async def reg_schedule_time(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –≤—Ä–µ–º—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏."""
    time_str = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú
    if not re.match(r"^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$", time_str):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ ü§î. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30).", reply_markup=create_keyboard())
        return

    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ state (–∑–Ω–∞—á–∏—Ç, —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
    user_data = await state.get_data()
    if 'name' in user_data and 'surname' in user_data and 'group' in user_data:
        # –≠—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        name = user_data['name']
        surname = user_data['surname']
        group = user_data['group']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        success = db.add_user(chat_id, message.from_user.username, name, surname, group, time_str)

        if success:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            await message.answer(
                f"–£—Ä–∞! ü•≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–ü—Ä–∏–≤–µ—Ç, {name} {surname} –∏–∑ –≥—Ä—É–ø–ø—ã {group}! ‚ú®\n"
                f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str} ‚è∞\n"
                f"–ë—É–¥—å –Ω–∞ —Å–≤—è–∑–∏! üòâ", reply_markup=create_keyboard()
            )
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ /start –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü§î. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.", reply_markup=create_keyboard())

    else:
        # –≠—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        user = db.get_user(chat_id)
        if not user:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=create_keyboard())
            await state.clear()
            return

        name = user[2]
        surname = user[3]
        group = user[4]

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏)
        db.update_user_time(chat_id, time_str)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ {time_str}")
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {time_str} ‚è∞", reply_markup=create_keyboard())

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è


@dp.message(F.text == "/myinfo")
async def show_my_info(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    user = db.get_user(message.chat.id)
    keyboard = create_keyboard()

    if user:
        await message.answer(
            f"–¢–≤–æ—è –∏–Ω—Ñ–∞, –±—Ä–æ üëá\n\n"
            f"–ò–º—è: {user[2]}\n"
            f"–§–∞–º–∏–ª–∏—è: {user[3]}\n"
            f"–ì—Ä—É–ø–ø–∞: {user[4]}\n"
            f"–í—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {user[5]} ‚è∞",
            reply_markup=keyboard
        )
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üòü –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=keyboard)


@dp.message(F.text == "/getschedule")
async def get_schedule_now(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."""
    user = db.get_user(message.chat.id)
    keyboard = create_keyboard()

    if user:
        group = user[4]
        schedule_text = schedule_fetcher.get_schedule(group)
        await message.answer(f"–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–π—á–∞—Å, {user[2]}! üëá\n{schedule_text}", reply_markup=keyboard)
    else:
        await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! ‚òùÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /start.", reply_markup=keyboard)


# --- –•–ï–ù–î–õ–ï–† –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –ü–†–û–§–ò–õ–Ø ---

@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üóëÔ∏è")
async def delete_profile(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    user_id = message.chat.id
    keyboard = create_keyboard()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    inline_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å üóëÔ∏è", callback_data="confirm_delete"),
            types.InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å üôÖ‚Äç‚ôÇÔ∏è", callback_data="cancel_delete"),
        ]
    ])
    await message.answer("–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? ü•∫ –í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã, –∏ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.", reply_markup=inline_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
@dp.callback_query(F.data.in_({"confirm_delete", "cancel_delete"}))
async def delete_confirmation(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.message.chat.id
    keyboard = create_keyboard()

    if callback.data == "confirm_delete":
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.delete_user(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")

        await callback.message.edit_text("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! üëã –ë–æ–ª—å—à–µ —è —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é ü§ñ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π /start")
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
    else:
        # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
        await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. üòé –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")

    await callback.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"


# --- –•–ï–ù–î–õ–ï–†–´ –î–õ–Ø –ö–ù–û–ü–û–ö ---
@dp.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù")
async def registration_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"."""
    await message.answer("–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è:", reply_markup=create_keyboard())
    await state.set_state(RegStates.name)


@dp.message(F.text == "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ")
async def all_schedule_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"."""
    user = db.get_user(message.chat.id)
    keyboard = create_keyboard()

    if user:
        group = user[4]
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_week_schedule (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é)
        schedule_text = schedule_fetcher.get_week_schedule(group)  # <--- –ó–ê–ú–ï–ù–ò–õ–ò!
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: üëá\n{schedule_text}", reply_markup=keyboard)
    else:
        await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! ‚òùÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /start.", reply_markup=keyboard)


@dp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üóìÔ∏è")
async def today_schedule_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"."""
    user = db.get_user(message.chat.id)
    keyboard = create_keyboard()

    if user:
        group = user[4]
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_schedule (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
        schedule_text = schedule_fetcher.get_schedule(group)
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: üëá\n{schedule_text}", reply_markup=keyboard)
    else:
        await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! ‚òùÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /start.", reply_markup=keyboard)


@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è ‚è∞")
async def change_time_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"."""
    await message.answer("–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):", reply_markup=create_keyboard())
    await state.set_state(RegStates.schedule_time)


@dp.message(RegStates.schedule_time)
async def reg_schedule_time(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –≤—Ä–µ–º—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏."""
    time_str = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú
    if not re.match(r"^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$", time_str):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ ü§î. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30).", reply_markup=create_keyboard())
        return

    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ state (–∑–Ω–∞—á–∏—Ç, —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
    user_data = await state.get_data()
    if 'name' in user_data and 'surname' in user_data and 'group' in user_data:
        # –≠—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        name = user_data['name']
        surname = user_data['surname']
        group = user_data['group']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        success = db.add_user(chat_id, message.from_user.username, name, surname, group, time_str)

        if success:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            await message.answer(
                f"–£—Ä–∞! ü•≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–ü—Ä–∏–≤–µ—Ç, {name} {surname} –∏–∑ –≥—Ä—É–ø–ø—ã {group}! ‚ú®\n"
                f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str} ‚è∞\n"
                f"–ë—É–¥—å –Ω–∞ —Å–≤—è–∑–∏! üòâ", reply_markup=create_keyboard()
            )
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ /start –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü§î. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.", reply_markup=create_keyboard())

    else:
        # –≠—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        user = db.get_user(chat_id)
        if not user:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=create_keyboard())
            await state.clear()
            return

        name = user[2]
        surname = user[3]
        group = user[4]

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏)
        db.update_user_time(chat_id, time_str)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ {time_str}")
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {time_str} ‚è∞", reply_markup=create_keyboard())

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

@dp.message()
async def echo_handler(message: types.Message) -> None:
    """–≠—Ö–æ-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        await message.send_copy(chat_id=message.chat.id, reply_markup=create_keyboard())
    except TypeError:
        await message.answer("–ù–µ –º–æ–≥—É —ç—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å! üòÖ", reply_markup=create_keyboard())


# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---

async def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞)
    db.init_db()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    scheduler.init_scheduler(bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
